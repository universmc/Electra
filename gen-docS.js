const fs = require("fs");
const Groq = require("groq-sdk");
const groq = new Groq();

// Objet du plan de projet avec des emojis
const projectPlan = {
  projectName: "D√©veloppement du mise √† jour objectif SMART üöÄ",
  phases: [
    { 
      phaseId: "phase0",  
      description: "Mod√®le SMART",
      phaseName: "Step_1: Initialisation üõ†Ô∏è",
      duration: "1 jour", // Dur√©e d√©finie pour cette phase
      startDate: "2024-10-13T02:00:00Z", // Date de d√©but
      endDate: "2024-10-14T02:00:00Z",   // Date de fin estim√©e
      tasks: [
        {
          title: "Initialisation ‚úÖ",
          taskStep: [
            {
              "title": "Exploration de la plateforme üîç",
              "description": "Naviguer sur l'interface utilisateur et d√©couvrir toutes les fonctionnalit√©s offertes par la plateforme. Consulter la documentation et les ressources en ligne pour obtenir une compr√©hension d√©taill√©e des capacit√©s de la plateforme."
            },
            {
              "step1": "Initialisation: [rolesSystem(promptSystem)] üí°",
              "step2": "Initialisation: [roleAssistant(promptAssistant)] üßë‚Äçüíª",
              "step3": "Initialisation: [roleUser(promptUser)] üìù",
            }
          ]
        }
      ]
    }
  ],
};

// Fonction pour afficher le plan du projet dans un format structur√© avec emojis
function displayProjectPlan(plan) {
  console.log(`üöÄ Nom du projet: ${plan.projectName}`);
  plan.phases.forEach(phase => {
    console.log(`\nüõ†Ô∏è Phase: ${phase.phaseName} - Dur√©e: ${phase.duration} - üìÖ Date de d√©but: ${phase.startDate}`);
    phase.tasks.forEach(task => {
      console.log(`- T√¢che: ${task.title}`);
      task.taskStep.forEach(step => {
        console.log(`  - ${step.title || step}`);
      });
    });
  });
}

// Fonction principale pour g√©rer l'interaction avec Groq et g√©n√©rer la documentation avec emojis
async function main() {

  // Contenus pour les diff√©rents r√¥les dans le dialogue avec emojis
  const systemContent = "Vous √™tes le syst√®me de gestion de projet üõ†Ô∏è.";
  const assistantContent = "Vous √™tes un assistant IA ü§ñ, charg√© d'accompagner l'utilisateur dans les t√¢ches de gestion.";
  const configContent = "";
  const projectPlanContent = JSON.stringify(projectPlan);

  // Cr√©ation de la compl√©tion de chat en utilisant Groq SDK avec emojis
  await groq.chat.completions.create({
    messages: [
        { role: "system", content: systemContent },
        { role: "assistant", content: assistantContent },
        { role: "system", content: configContent },
        { role: "system", content: projectPlanContent },
        { role: "user", name: "systemDream", content: "phase0:initialisation de l'instance Gantt-chart üìä" },
        { role: "assistant", name: "‚ú®_pi", content: "Initialisation de la phase 0 üõ†Ô∏è" },
        { role: "system", name: "systemDream", content: "phase1:Conceptualisation üí°" },
        { role: "assistant", name: "‚ú®_pi", content: "Conceptualisation en cours üß†" },
        { role: "user", name: "Groq", content: "√âlaboration du bilan avec le mod√®le de Gantt üìÖ" },
        { role: "system", content: projectPlanContent },
        { role: "assistant", name: "‚ú®_pi", content: "G√©n√©ration du rapport de la phase 0 üìÑ" },
    ],
    model: "mixtral-8x7b-32768",
    temperature: 0.5,
    max_tokens: 2048,
    top_p: 1,
    stop: null,
    stream: false,
  }).then((chatCompletion) => {
    // √âcrire le contenu g√©n√©r√© dans un fichier markdown
    const mdContent = chatCompletion.choices[0]?.message?.content;
    const outputFilePath = "phase0_initialisation_" + new Date().toISOString().replace(/[-:TZ]/g, "") + ".md";
    fs.writeFileSync(outputFilePath, mdContent);
    console.log("üìÑ Documentation g√©n√©r√©e et enregistr√©e dans " + outputFilePath);
  });
}

// Ex√©cution du programme principal
main().catch(console.error);
